"""
Django settings for mvrecommend project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 确保logs目录存在
LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)

# Media files (Images, etc)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^q%f$*5@p%h)qz@ji4ai343u3%*r+z56@*xzer)-=fj+mblsk^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Debug Toolbar设置
INTERNAL_IPS = [
    '127.0.0.1',
    'localhost',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 自定义应用
    'users.apps.UsersConfig',
    'movies.apps.MoviesConfig',
    'recommender.apps.RecommenderConfig',
    'compressor',  # 添加django-compressor应用
    'debug_toolbar',  # 添加debug toolbar
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'mvrecommend.middleware.ImageProcessingMiddleware',
    'mvrecommend.middleware.CacheControlMiddleware',
    'mvrecommend.middleware.DatabaseConnectionMiddleware',
]

ROOT_URLCONF = 'mvrecommend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mvrecommend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# MySQL路径设置 - 使用相对路径，提高可移植性
# 如果要使用绝对路径，取消注释下面的行并修改为你的MySQL路径
# MYSQL_BASE_DIR = 'D:/pycharm/pythonProject2/movierecommends/mysql-9.2.0-winx64'
MYSQL_BASE_DIR = os.path.join(BASE_DIR, 'mysql-9.2.0-winx64')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'movierecommendation',
        'USER': 'root',
        'PASSWORD': '123',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'autocommit': True,
            'connect_timeout': 10,
            'read_timeout': 30,
            'write_timeout': 30,
            'sql_mode': 'STRICT_TRANS_TABLES',
            'isolation_level': 'read committed'
        },
        'CONN_MAX_AGE': 60,  # 连接存活时间设为60秒
        'CONN_HEALTH_CHECKS': True,
        'TEST': {
            'CHARSET': 'utf8mb4',
            'COLLATION': 'utf8mb4_unicode_ci',
        },
    }
}

# 添加数据库连接重试设置
DATABASE_RETRY_COUNT = 3  # 重试次数
DATABASE_RETRY_DELAY = 1  # 重试延迟（秒）

# 缓存配置
CACHE_DIR = os.path.join(BASE_DIR, 'cache')
os.makedirs(CACHE_DIR, exist_ok=True)

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': CACHE_DIR,
        'TIMEOUT': 60 * 60 * 24 * 30,  # 30天
        'OPTIONS': {
            'MAX_ENTRIES': 10000
        }
    }
}

# 图片处理配置
IMAGE_PROCESSING = {
    'ENABLED': True,
    'MAX_SIZE': (800, 1200),
    'DEFAULT_FORMAT': 'JPEG',
    'DEFAULT_QUALITY': 85,
    'LOCAL_STORAGE_PATH': os.path.join(MEDIA_ROOT, 'movie_posters'),
}

# 图片代理配置
IMAGE_PROXY = {
    'CACHE_TIMEOUT': 3600,  # 1小时缓存
    'MAX_RETRIES': 3,
    'DEFAULT_IMAGE': os.path.join(MEDIA_ROOT, 'default.jpg'),
    'USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
}

# 允许的图片域名
ALLOWED_IMAGE_HOSTS = [
    'img1.doubanio.com',
    'img2.doubanio.com',
    'img3.doubanio.com',
    'img9.doubanio.com'
]

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# 静态文件查找器
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

# 压缩设置
COMPRESS_ENABLED = True
COMPRESS_OFFLINE = True
COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.rCSSMinFilter',
]
COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.JSMinFilter',
]

# 图片处理相关配置
IMAGE_CACHE_TIMEOUT = 86400 * 30  # 30天

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 自定义用户模型
AUTH_USER_MODEL = 'users.User'

# 启用HTML压缩
HTML_MINIFY = True

# 确保媒体文件目录存在
for dir_path in [STATIC_ROOT, MEDIA_ROOT, os.path.join(MEDIA_ROOT, 'movie_posters')]:
    os.makedirs(dir_path, exist_ok=True)

# 确保存储目录存在
os.makedirs(MEDIA_ROOT, exist_ok=True)
os.makedirs(IMAGE_PROCESSING['LOCAL_STORAGE_PATH'], exist_ok=True)

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',  # 只显示INFO及以上级别的日志
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'db_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'db_pool.log'),
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'image_proxy.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'movies': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'mvrecommend.db_pool': {
            'handlers': ['db_file'],
            'level': 'DEBUG',
            'propagate': False,  # 不传播到根日志器
        },
    },
}
